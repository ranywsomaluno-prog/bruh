-- Carregar Rayfield
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

-- Criar Janela
local Window = Rayfield:CreateWindow({
    Name = "Interface de Teste",
    LoadingTitle = "Rayfield UI",
    LoadingSubtitle = "Exemplo Toggle + Slider",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = "RayfieldExample",
        FileName = "ConfigUI"
    }
})

-- Criar Aba Principal
local MainTab = Window:CreateTab("Controle", 4483362458)
local Section = MainTab:CreateSection("Executar Ação")

-- Localizar o RemoteEvent
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local BeanstalkRESubmitAllPlant = ReplicatedStorage.GameEvents.BeanstalkRESubmitAllPlant
local UnlockSlotFromPet = ReplicatedStorage.GameEvents.UnlockSlotFromPet
local Plant_RE = ReplicatedStorage.GameEvents.Plant_RE
local Sell_Inventory = ReplicatedStorage.GameEvents.Sell_Inventory
local BuySeedStock = ReplicatedStorage.GameEvents.BuySeedStock

-- Variáveis de controle
local AutoExecutar = false
local Velocidade = 1
local AutoTask = nil

-- Variáveis para as novas funcionalidades
local AutoPlantEnabled = false
local AutoHarvestEnabled = false
local AutoBuyEnabled = false
local SelectedSeed = ""

-- Função que dispara o RemoteEvent
local function ExecutarAcao()
    BeanstalkRESubmitAllPlant:FireServer()
    print("RemoteEvent BeanstalkRESubmitAllPlant disparado!")
end

-- Função que dispara o UnlockSlotFromPet
local function ExecutarUnlockSlot()
    UnlockSlotFromPet:FireServer()
    print("RemoteEvent UnlockSlotFromPet disparado!")
end

-- Funções extraídas do script analisado
local function GetFarm()
    local Farms = workspace.Farm:GetChildren()
    local LocalPlayer = game.Players.LocalPlayer
    
    for _, Farm in next, Farms do
        local Important = Farm.Important
        local Data = Important.Data
        local Owner = Data.Owner
        
        if Owner.Value == LocalPlayer.Name then
            return Farm
        end
    end
    return nil
end

local function GetSeedStock()
    local SeedStock = {}
    local SeedShop = game.Players.LocalPlayer.PlayerGui.Seed_Shop
    local Items = SeedShop:FindFirstChild("Blueberry", true).Parent
    
    for _, Item in next, Items:GetChildren() do
        local MainFrame = Item:FindFirstChild("Main_Frame")
        if not MainFrame then continue end
        
        local StockText = MainFrame.Stock_Text.Text
        local StockCount = tonumber(StockText:match("%d+"))
        
        SeedStock[Item.Name] = StockCount
    end
    
    return SeedStock
end

local function BuySeed(Seed)
    BuySeedStock:FireServer(Seed)
end

local function BuyAllSelectedSeeds()
    local Stock = GetSeedStock()[SelectedSeed]
    if not Stock or Stock <= 0 then return end
    
    for i = 1, Stock do
        BuySeed(SelectedSeed)
        wait(0.1)
    end
end

local function Plant(Position, Seed)
    Plant_RE:FireServer(Position, Seed)
    wait(0.3)
end

local function GetRandomFarmPoint()
    local MyFarm = GetFarm()
    if not MyFarm then return Vector3.new(0, 0, 0) end
    
    local PlantLocations = MyFarm.Important.Plant_Locations
    local FarmLands = PlantLocations:GetChildren()
    local FarmLand = FarmLands[math.random(1, #FarmLands)]
    
    local function GetArea(Base)
        local Center = Base:GetPivot()
        local Size = Base.Size
        
        local X1 = math.ceil(Center.X - (Size.X/2))
        local Z1 = math.ceil(Center.Z - (Size.Z/2))
        local X2 = math.floor(Center.X + (Size.X/2))
        local Z2 = math.floor(Center.Z + (Size.Z/2))
        
        return X1, Z1, X2, Z2
    end
    
    local X1, Z1, X2, Z2 = GetArea(FarmLand)
    local X = math.random(X1, X2)
    local Z = math.random(Z1, Z2)
    
    return Vector3.new(X, 4, Z)
end

local function AutoPlantLoop()
    if not SelectedSeed or SelectedSeed == "" then
        print("Selecione uma semente primeiro!")
        return
    end
    
    local Stock = GetSeedStock()[SelectedSeed]
    if not Stock or Stock <= 0 then
        print("Sem estoque da semente selecionada!")
        return
    end
    
    for i = 1, Stock do
        if not AutoPlantEnabled then break end
        
        local Point = GetRandomFarmPoint()
        Plant(Point, SelectedSeed)
    end
end

local function HarvestPlant(Plant)
    local Prompt = Plant:FindFirstChild("ProximityPrompt", true)
    if not Prompt then return end
    
    fireproximityprompt(Prompt)
end

local function GetHarvestablePlants()
    local Plants = {}
    local MyFarm = GetFarm()
    if not MyFarm then return Plants end
    
    local PlantsPhysical = MyFarm.Important.Plants_Physical
    local Character = game.Players.LocalPlayer.Character
    local PlayerPosition = Character:GetPivot().Position
    
    local function CollectHarvestable(Parent, PlantsList)
        for _, Plant in next, Parent:GetChildren() do
            local Fruits = Plant:FindFirstChild("Fruits")
            if Fruits then
                CollectHarvestable(Fruits, PlantsList)
            end
            
            local PlantPosition = Plant:GetPivot().Position
            local Distance = (PlayerPosition - PlantPosition).Magnitude
            if Distance > 15 then continue end
            
            local Prompt = Plant:FindFirstChild("ProximityPrompt", true)
            if Prompt and Prompt.Enabled then
                table.insert(PlantsList, Plant)
            end
        end
        return PlantsList
    end
    
    return CollectHarvestable(PlantsPhysical, Plants)
end

local function HarvestPlants()
    local Plants = GetHarvestablePlants()
    for _, Plant in next, Plants do
        HarvestPlant(Plant)
    end
end

local function AutoHarvestLoop()
    while AutoHarvestEnabled do
        HarvestPlants()
        wait(1)
    end
end

local function AutoBuyLoop()
    while AutoBuyEnabled do
        BuyAllSelectedSeeds()
        wait(5) -- Verifica a cada 5 segundos
    end
end

-- Toggle para loop
MainTab:CreateToggle({
    Name = "Executar Repetidamente",
    CurrentValue = false,
    Callback = function(Value)
        AutoExecutar = Value
        
        -- Parar task anterior se existir
        if AutoTask then
            task.cancel(AutoTask)
            AutoTask = nil
        end
        
        print("AutoExecutar:", Value)

        if AutoExecutar then
            AutoTask = task.spawn(function()
                while AutoExecutar do
                    ExecutarAcao()
                    task.wait(Velocidade)
                end
            end)
        end
    end,
})

-- Slider para velocidade
MainTab:CreateSlider({
    Name = "Velocidade de Execução",
    Range = {0.1, 5},
    Increment = 0.1,
    Suffix = "s",
    CurrentValue = 1,
    Callback = function(Value)
        Velocidade = Value
        print("Velocidade ajustada para:", Value, "segundos")
    end,
})

-- Botão para execução única do Beanstalk
MainTab:CreateButton({
    Name = "Executar Beanstalk (Uma vez)",
    Callback = function()
        ExecutarAcao()
    end
})

-- Botão para execução única do UnlockSlotFromPet
MainTab:CreateButton({
    Name = "Executar UnlockSlotFromPet",
    Callback = function()
        ExecutarUnlockSlot()
    end
})

-- Nova seção para as funcionalidades extraídas
local FarmSection = MainTab:CreateSection("Farm Automático")

-- Seleção de semente
local seedOptions = {}
local function UpdateSeedOptions()
    seedOptions = {}
    local stock = GetSeedStock()
    for seedName, _ in pairs(stock) do
        table.insert(seedOptions, seedName)
    end
end

UpdateSeedOptions()

MainTab:CreateDropdown({
    Name = "Selecionar Semente",
    Options = seedOptions,
    CurrentOption = "",
    Callback = function(Option)
        SelectedSeed = Option
        print("Semente selecionada:", SelectedSeed)
    end,
})

-- Botão para atualizar lista de sementes
MainTab:CreateButton({
    Name = "Atualizar Lista de Sementes",
    Callback = UpdateSeedOptions
})

-- Toggle para Plantio Automático
MainTab:CreateToggle({
    Name = "Plantio Automático",
    CurrentValue = false,
    Callback = function(Value)
        AutoPlantEnabled = Value
        if Value then
            task.spawn(function()
                while AutoPlantEnabled do
                    AutoPlantLoop()
                    wait(2) -- Espera 2 segundos entre os plantios
                end
            end)
        end
    end,
})

-- Toggle para Colheita Automática
MainTab:CreateToggle({
    Name = "Colheita Automática",
    CurrentValue = false,
    Callback = function(Value)
        AutoHarvestEnabled = Value
        if Value then
            task.spawn(AutoHarvestLoop)
        end
    end,
})

-- Toggle para Compra Automática
MainTab:CreateToggle({
    Name = "Compra Automática",
    CurrentValue = false,
    Callback = function(Value)
        AutoBuyEnabled = Value
        if Value then
            task.spawn(AutoBuyLoop)
        end
    end,
})

-- Botão para comprar todas as sementes selecionadas
MainTab:CreateButton({
    Name = "Comprar Todas as Sementes",
    Callback = BuyAllSelectedSeeds
})

-- Botão para colher plantas
MainTab:CreateButton({
    Name = "Colher Plantas",
    Callback = HarvestPlants
})

-- Criar Aba do Player
local PlayerTab = Window:CreateTab("Player", 4483362458)
local PlayerSection = PlayerTab:CreateSection("Modificações do Player")

-- Variável para controle do Infinite Jump
local InfiniteJumpEnabled = false
local JumpConnection = nil

-- Função para Infinite Jump
local function ToggleInfiniteJump()
    if JumpConnection then
        JumpConnection:Disconnect()
        JumpConnection = nil
    end
    
    if InfiniteJumpEnabled then
        JumpConnection = game:GetService("UserInputService").JumpRequest:Connect(function()
            local character = game.Players.LocalPlayer.Character
            if character then
                local humanoid = character:FindFirstChildOfClass("Humanoid")
                if humanoid and humanoid:GetState() ~= Enum.HumanoidStateType.Dead then
                    humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
                end
            end
        end)
        
        Rayfield:Notify({
            Title = "Infinite Jump Ativado",
            Content = "Pressione Espaço para pular infinitamente",
            Duration = 3
        })
    else
        Rayfield:Notify({
            Title = "Infinite Jump Desativado",
            Content = "Pulo infinito desligado",
            Duration = 3
        })
    end
end

-- Toggle para Infinite Jump (PRIMEIRO)
PlayerTab:CreateToggle({
    Name = "Infinite Jump",
    CurrentValue = false,
    Callback = function(Value)
        InfiniteJumpEnabled = Value
        ToggleInfiniteJump()
    end,
})

-- Slider para velocidade (SEGUNDO)
PlayerTab:CreateSlider({
    Name = "Velocidade do Personagem",
    Range = {16, 100},
    Increment = 1,
    Suffix = "unidades",
    CurrentValue = 16,
    Callback = function(Value)
        local character = game.Players.LocalPlayer.Character
        if character then
            local humanoid = character:FindFirstChildOfClass("Humanoid")
            if humanoid then
                humanoid.WalkSpeed = Value
            end
        end
    end,
})