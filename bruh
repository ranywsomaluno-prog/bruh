local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

-- Personalization settings
local PersonalizationUI = {
    NameUI = "goon hub",
    CreatorName = "rany",
    LoadingMessage = "rapaz ele t√° sem zap",
    MainColor = Color3.fromRGB(120, 90, 245),
    ShowNotifications = true
}

-- Create Window
local Window = Rayfield:CreateWindow({
    Name = PersonalizationUI.NameUI,
    LoadingTitle = PersonalizationUI.NameUI,
    LoadingSubtitle = "by " .. PersonalizationUI.CreatorName,
    ConfigurationSaving = {
        Enabled = true,
        FolderName = "GoonHubConfigs",
        FileName = "GoonHubSettings"
    },
    Discord = {
        Enabled = false,
        Invite = "discord.gg/goonhub",
        RememberJoins = true
    },
    KeySystem = false,
})

-- Show loading notification
Rayfield:Notify(PersonalizationUI.LoadingMessage, 5)

-- Create tabs
local MainTab = Window:CreateTab("Main", 4483362458)
local SettingsTab = Window:CreateTab("Settings", 4483362458)
local ExtraTab = Window:CreateTab("Extra", 4483362458)

-- Variables for auto farm
local AutoFarmEnabled = false
local FarmDelay = 1
local BeanstalkRemote = game:GetService("ReplicatedStorage"):WaitForChild("BeanstalkRESubmitAllPlant")

-- Function to execute remote
local function ExecuteRemote()
    local success, errorMessage = pcall(function()
        BeanstalkRemote:FireServer()
    end)
    
    if success then
        if PersonalizationUI.ShowNotifications then
            Rayfield:Notify("Remote executed successfully!", 3)
        end
    else
        warn("Error executing remote: " .. tostring(errorMessage))
        if PersonalizationUI.ShowNotifications then
            Rayfield:Notify("Error executing remote!", 3)
        end
    end
end

-- Auto farm function
local function StartAutoFarm()
    while AutoFarmEnabled and task.wait(FarmDelay) do
        ExecuteRemote()
    end
end

-- Create Beanstalk section
local BeanstalkSection = MainTab:CreateSection("Beanstalk Farm")

-- Auto Farm Toggle
local AutoFarmToggle = MainTab:CreateToggle({
    Name = "Auto Farm Beanstalk",
    CurrentValue = false,
    Callback = function(Value)
        AutoFarmEnabled = Value
        if Value then
            if PersonalizationUI.ShowNotifications then
                Rayfield:Notify("Auto Farm started!", 3)
            end
            task.spawn(StartAutoFarm)
        else
            if PersonalizationUI.ShowNotifications then
                Rayfield:Notify("Auto Farm stopped!", 3)
            end
        end
    end,
})

-- Delay Slider
local DelaySlider = MainTab:CreateSlider({
    Name = "Farm Delay (seconds)",
    Range = {1, 5},
    Increment = 0.5,
    Suffix = "s",
    CurrentValue = 1,
    Callback = function(Value)
        FarmDelay = Value
        if PersonalizationUI.ShowNotifications then
            Rayfield:Notify("Delay set to: " .. Value .. "s", 2)
        end
    end,
})

-- Execute Once Button
local ExecuteOnceButton = MainTab:CreateButton({
    Name = "Execute Once",
    Callback = ExecuteRemote,
})

-- Test Section
local TestSection = MainTab:CreateSection("Test Elements")

local TestButton = MainTab:CreateButton({
    Name = "Test Button",
    Callback = function()
        Rayfield:Notify("Test button works!", 3)
    end,
})

local TestToggle = MainTab:CreateToggle({
    Name = "Test Toggle",
    CurrentValue = false,
    Callback = function(Value)
        if Value then
            Rayfield:Notify("Test toggle enabled!", 2)
        else
            Rayfield:Notify("Test toggle disabled!", 2)
        end
    end,
})

-- Settings Tab
local UISettingsSection = SettingsTab:CreateSection("UI Settings")

local NotificationsToggle = SettingsTab:CreateToggle({
    Name = "Show Notifications",
    CurrentValue = PersonalizationUI.ShowNotifications,
    Callback = function(Value)
        PersonalizationUI.ShowNotifications = Value
        Rayfield:Notify("Notifications " .. (Value and "enabled" or "disabled"), 2)
    end,
})

local ThemeDropdown = SettingsTab:CreateDropdown({
    Name = "UI Theme",
    Options = {"Default", "Dark", "Light", "Aqua"},
    CurrentOption = "Default",
    Callback = function(Option)
        Rayfield:Notify("Theme changed to: " .. Option, 2)
    end,
})

-- Extra Tab
local InfoSection = ExtraTab:CreateSection("Information")

local CreatorLabel = ExtraTab:CreateLabel("Created by: " .. PersonalizationUI.CreatorName)
local VersionLabel = ExtraTab:CreateLabel("Version: 1.0.0")

local DiscordButton = ExtraTab:CreateButton({
    Name = "Copy Discord",
    Callback = function()
        setclipboard("discord.gg/goonhub")
        Rayfield:Notify("Discord copied to clipboard!", 3)
    end,
})

-- Set watermark
Rayfield:SetWatermark("Goon Hub by " .. PersonalizationUI.CreatorName)

print("[" .. PersonalizationUI.NameUI .. "] Loaded successfully! Created by " .. PersonalizationUI.CreatorName)
