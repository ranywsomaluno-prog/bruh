-- Carregar Rayfield
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

-- Criar Janela
local Window = Rayfield:CreateWindow({
    Name = "Interface de Teste",
    LoadingTitle = "Rayfield UI",
    LoadingSubtitle = "Exemplo Toggle + Slider",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = "RayfieldExample",
        FileName = "ConfigUI"
    }
})

-- Criar Aba Principal
local MainTab = Window:CreateTab("Controle", 4483362458)
local Section = MainTab:CreateSection("Executar Ação")

-- Localizar o RemoteEvent
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local BeanstalkRESubmitAllPlant = ReplicatedStorage.GameEvents.BeanstalkRESubmitAllPlant
local UnlockSlotFromPet = ReplicatedStorage.GameEvents.UnlockSlotFromPet

-- Variáveis de controle
local AutoExecutar = false
local Velocidade = 1
local AutoTask = nil

-- Função que dispara o RemoteEvent
local function ExecutarAcao()
    BeanstalkRESubmitAllPlant:FireServer()
    print("RemoteEvent BeanstalkRESubmitAllPlant disparado!")
end

-- Função que dispara o UnlockSlotFromPet
local function ExecutarUnlockSlot()
    UnlockSlotFromPet:FireServer()
    print("RemoteEvent UnlockSlotFromPet disparado!")
end

-- Toggle para loop
MainTab:CreateToggle({
    Name = "Executar Repetidamente",
    CurrentValue = false,
    Callback = function(Value)
        AutoExecutar = Value
        
        -- Parar task anterior se existir
        if AutoTask then
            task.cancel(AutoTask)
            AutoTask = nil
        end
        
        print("AutoExecutar:", Value)

        if AutoExecutar then
            AutoTask = task.spawn(function()
                while AutoExecutar do
                    ExecutarAcao()
                    task.wait(Velocidade)
                end
            end)
        end
    end,
})

-- Slider para velocidade
MainTab:CreateSlider({
    Name = "Velocidade de Execução",
    Range = {0.1, 5},
    Increment = 0.1,
    Suffix = "s",
    CurrentValue = 1,
    Callback = function(Value)
        Velocidade = Value
        print("Velocidade ajustada para:", Value, "segundos")
    end,
})

-- Botão para execução única do Beanstalk
MainTab:CreateButton({
    Name = "Executar Beanstalk (Uma vez)",
    Callback = function()
        ExecutarAcao()
    end
})

-- Botão para execução única do UnlockSlotFromPet
MainTab:CreateButton({
    Name = "Executar UnlockSlotFromPet",
    Callback = function()
        ExecutarUnlockSlot()
    end
})

-- Criar Aba do Player
local PlayerTab = Window:CreateTab("Player", 4483362458)
local PlayerSection = PlayerTab:CreateSection("Modificações do Player")

-- Variável para controle do Infinite Jump
local InfiniteJumpEnabled = false
local JumpConnection = nil

-- Função para Infinite Jump
local function ToggleInfiniteJump()
    if JumpConnection then
        JumpConnection:Disconnect()
        JumpConnection = nil
    end
    
    if InfiniteJumpEnabled then
        JumpConnection = game:GetService("UserInputService").JumpRequest:Connect(function()
            local character = game.Players.LocalPlayer.Character
            if character then
                local humanoid = character:FindFirstChildOfClass("Humanoid")
                if humanoid and humanoid:GetState() ~= Enum.HumanoidStateType.Dead then
                    humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
                end
            end
        end)
        
        Rayfield:Notify({
            Title = "Infinite Jump Ativado",
            Content = "Pressione Espaço para pular infinitamente",
            Duration = 3
        })
    else
        Rayfield:Notify({
            Title = "Infinite Jump Desativado",
            Content = "Pulo infinito desligado",
            Duration = 3
        })
    end
end

-- Toggle para Infinite Jump (PRIMEIRO)
PlayerTab:CreateToggle({
    Name = "Infinite Jump",
    CurrentValue = false,
    Callback = function(Value)
        InfiniteJumpEnabled = Value
        ToggleInfiniteJump()
    end,
})

-- Slider para velocidade (SEGUNDO)
PlayerTab:CreateSlider({
    Name = "Velocidade do Personagem",
    Range = {16, 100},
    Increment = 1,
    Suffix = "está",
    CurrentValue = 16,
    Callback = function(Value)
        local character = game.Players.LocalPlayer.Character
        if character then
            local humanoid = character:FindFirstChildOfClass("Humanoid")
            if humanoid then
                humanoid.WalkSpeed = Value
            end
        end
    end,
})

-- Função para configurar a velocidade do jogador
local function SetPlayerSpeed()
    Rayfield:Prompt({
        Title = 'Definir Velocidade',
        SubTitle = 'Digite o valor da velocidade:',
        Actions = {
            Accept = {
                Name = 'Confirmar',
                Callback = function(input)
                    local speed = tonumber(input)
                    if speed and speed > 0 then
                        local character = game.Players.LocalPlayer.Character
                        if character then
                            local humanoid = character:FindFirstChildOfClass("Humanoid")
                            if humanoid then
                                humanoid.WalkSpeed = speed
                                Rayfield:Notify({
                                    Title = "Sucesso",
                                    Content = "Velocidade definida para: " .. speed,
                                    Duration = 3
                                })
                            else
                                Rayfield:Notify({
                                    Title = "Erro",
                                    Content = "Humanoid não encontrado!",
                                    Duration = 3
                                })
                            end
                        else
                            Rayfield:Notify({
                                Title = "Erro",
                                Content = "Personagem não encontrado!",
                                Duration = 3
                            })
                        end
                    else
                        Rayfield:Notify({
                            Title = "Erro",
                            Content = "Digite um número válido!",
                            Duration = 3
                        })
                    end
                end
            },
            Decline = {
                Name = 'Cancelar',
                Callback = function()
                    -- Não faz nada
                end
            }
        }
    })
end

-- Botão para definir velocidade do jogador (TERCEIRO)
PlayerTab:CreateButton({
    Name = "Definir Velocidade",
    Callback = SetPlayerSpeed
})
